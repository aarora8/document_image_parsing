#!/usr/bin/env python3

# Copyright 2018 Johns Hopkins University (author: Ashish Arora)
# Apache 2.0

""" This module will be used for creating text localization mask on page image.
 Given the word segmentation (bounding box around a word) for every word, it will
 extract line segmentation. To extract line segmentation, it will take word bounding
 boxes of a line as input, will create a minimum area bounding box that will contain
 all corner points of word bounding boxes. The obtained bounding box (will not necessarily
 be vertically or horizontally aligned).
"""
import numpy as np
from PIL import Image
from waldo.scripts.waldo.mar_utils import *
import matplotlib
matplotlib.use('TkAgg')

import matplotlib.pyplot as plt
from matplotlib.patches import Circle


def get_mask_from_page_image(madcat_file_path, image_file_name, max_size):
    """ Given a page image, extracts the page image mask from it.
        Input
        -----
        image_file_name (string): complete path and name of the page image.
        madcat_file_path (string): complete path and name of the madcat xml file
                                      corresponding to the page image.
        """

    objects = _get_bounding_box(madcat_file_path)
    img = Image.open(image_file_name).convert("RGB")
    im_arr = np.array(img)

    config = CoreConfig()
    config.num_colors = 3
    image_with_objects = {
        'img': im_arr,
        'objects': objects
    }

    im_height = im_arr.shape[0]
    im_width = im_arr.shape[1]

    validated_objects = []
    for original_object in image_with_objects['objects']:
        ordered_polygon_points = original_object['polygon']
        object = {}
        resized_pp = []
        for point in ordered_polygon_points:
            new_point = _validate_and_update_point(point, im_width, im_height)
            resized_pp.append(new_point)
        object['polygon'] = resized_pp
        validated_objects.append(object)

    validated_image_with_objects = {
        'img': im_arr,
        'objects': validated_objects
    }

    scaled_image_with_objects = scale_down_image_with_objects(validated_image_with_objects, config,
                                                              max_size)

    img_padded = make_square_image_with_padding(scaled_image_with_objects['img'], 3, 255)

    padded_image_with_objects = {
        'img': img_padded,
        'objects': scaled_image_with_objects['objects']
    }

    y = convert_to_mask(padded_image_with_objects, config)

    return y


def _get_bounding_box(image_file_path):
    """ Given word boxes of each line, return bounding box for each
     line in sorted order
    Input
    -----
    image_file_name (string): complete path and name of the page image.
    madcat_file_path (string): complete path and name of the madcat xml file
                                  corresponding to the page image.
    """

    # img_arr = np.load(image_file_path)
    im = Image.open(image_file_path)
    img_arr = np.array(im)
    img_unique_val = np.unique(img_arr)
    # for val in img_unique_val:
    #     new_val = val*10 +30
    #     img_arr[img_arr == val] = new_val
    img_unique_val = np.unique(img_arr)
    p_list = list()
    for index, val in enumerate(img_unique_val):
        # if val == 30:
        #     continue
        points_location = np.where(img_arr == val)
        points_list = list(zip(points_location[0], points_location[1]))
        if len(points_list) >1000:
            continue
        hull_ordered = compute_hull(points_list)

        print("num elements: {}".format(len(points_list)))
        print("num elements: {}".format(len(hull_ordered)))

        if len(hull_ordered) < 4:
            continue
        hull_ordered = tuple(hull_ordered)
        min_rectangle = bounding_area(0, hull_ordered)
        for i in range(1, len(hull_ordered) - 1):
            rectangle = bounding_area(i, hull_ordered)
            if rectangle['area'] < min_rectangle['area']:
                min_rectangle = rectangle

        min_rectangle['unit_vector_angle'] = atan2(min_rectangle['unit_vector'][1], min_rectangle['unit_vector'][0])
        min_rectangle['rectangle_center'] = to_xy_coordinates(min_rectangle['unit_vector_angle'],
                                                               min_rectangle['rectangle_center'])
        points_list = rectangle_corners(min_rectangle)
        p_list.append(points_list)

    new_p_list= list()
    for point in p_list:
        new_points_list = [(t[1], t[0]) for t in point]
        new_p_list.append(new_points_list)

    patches = [Circle((new_p_list[0][0]), radius=2, color='red'),
              Circle((new_p_list[0][1]), radius=2, color='red'),
              Circle((new_p_list[0][2]), radius=2, color='red'),
              Circle((new_p_list[0][3]), radius=2, color='red')]

    for point in new_p_list:
        patches.append(Circle((point[0]), radius=2, color='red'))
        patches.append(Circle((point[1]), radius=2, color='red'))
        patches.append(Circle((point[2]), radius=2, color='red'))
        patches.append(Circle((point[3]), radius=2, color='red'))

    fig, ax = plt.subplots(1)
    # im = Image.fromarray(img_arr)
    ax.imshow(im)
    for p in patches:
        ax.add_patch(p)
    plt.show(fig)
    print("patches")


def _validate_and_update_point(pt0, im_width, im_height, pt1=(0, 0)):
    new_point = pt0
    if pt0[0] < 0:
        new_point = _get_pointx_inside_origin(pt0, pt1)

    if pt0[0] > im_width:
        new_point = _get_pointx_inside_width(pt0, pt1, im_width)

    if pt0[1] < 0:
        new_point = _get_pointy_inside_origin(pt0, pt1)

    if pt0[1] > im_height:
        new_point = _get_pointy_inside_height(pt0, pt1, im_height)

    return new_point


def _get_pointx_inside_origin(pt0, pt1):
    """ Given a point pt0, return an updated point that is
    inside orgin. It finds line equation and uses it to
    get updated point x value inside origin
    Returns
    -------
    (float, float): updated point
    """
    return (0, pt0[1])
    # TODO


def _get_pointx_inside_width(pt0, pt1, im_width):
    """ Given a point pt0, return an updated point that is
    inside image width. It finds line equation and uses it to
    get updated point x value inside image width
    Returns
    -------
    (float, float): updated point
    """
    return (im_width, pt0[1])
    # TODO


def _get_pointy_inside_origin(pt0, pt1):
    """ Given a point pt0, return an updated point that is
    inside orgin. It finds line equation and uses it to
    get updated point y value inside origin
    Returns
    -------
    (float, float): updated point
    """
    return (pt0[0], 0)
    # TODO


def _get_pointy_inside_height(pt0, pt1, im_height):
    """ Given a point pt0, return an updated point that is
    inside image height. It finds line equation and uses it to
    get updated point y value inside image height
    Returns
    -------
    (float, float): updated point
    """
    return (pt0[0], im_height)
    # TODO


def main():

    _get_bounding_box("/Users/ashisharora/segment_test_b03/mask_pred/AAW_ARB_20070104.0028_1_LDC0088.png")

if __name__ == '__main__':
      main()
